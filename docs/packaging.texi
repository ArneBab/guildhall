@node Packaging Guide
@chapter Packaging Guide

@dfn{Packaging} is the act of supplying Sigil metadata for a set of
libraries and/or programs.  You should make yourself familiar with the
overall concepts of Sigil (@pxref{Overview}) as prerequiste to this
chapter.

@menu
* Simple Packaging Example:: Packaging in a nutshell
* The Metadata File:: The gory details
@end menu

@node Simple Packaging Example
@section A simple Example

Let's say you want to package a program named @samp{example}, which
contains a few libraries and a program.  These files are present in its
source tree:

@table @file
@item README
A short note explaining usage of the software.
@item foo.scm
Contains the library @code{(example foo)}.
@item bar.scm
Contains the library @code{(example bar)}.
@item programs/hello
A program that use the above libraries.
@end table

For packaging this software, we add a file @file{pkg-list.scm} in the
top-level directory, which will contain the metadata in S-expression
syntax, a bit like the R6RS @code{library} form.  The following metadata
can be supplied:

@itemize @bullet
@item
The name of the package.
@item
The version of the package.
@item
Dependencies on other packages.
@item
Rules describing wich files in the source tree belong to which
categories (@pxref{Packages}), and what filename they should have
relative to that category.
@item
An @dfn{installation hook}, which is code run after the package is
already unpacked in its destination, but before it is considered
installed.  This hook may install additional files (probably ones that
can be generated automatically).
@end itemize

Of these, only the name and version are mandatory.  The rest are
optional.

Hence a minimal @code{package} form listing package name looks like
this:

@lisp
(package (example (0))
  (depends (srfi)))
@end lisp

This already specifies the @samp{srfi} package as the only dependency;
further dependencies may of course be listed.

Inspecting our work with using the @command{guild show-bundle}
command, passing it the top-level directory where the
@file{pkg-list.scm} file resides in:

@example
% guild show-bundle example
Package: example
Version: 0
Depends: (srfi)
Category: documentation
 README
@end example

The package is nearly empty, besides the @file{README} file, which was
added to the @samp{documentation} category automatically.  We need rules
dealing with the libraries and the program, which are missing:

@lisp
(package (example (0))
  (depends (srfi))
  (libraries
    (scm -> "example"))
  (programs
    (("programs" "hello") -> "hello")))
@end lisp

The rule inside the @code{library} form says ``put all files with an
@samp{scm} extension below the @file{example} directory'', while the
@code{programs} rule tells Sigil to place the file
@file{programs/hello} into the top-level directory of the
@samp{programs} category as file @file{hello}.

Now we have everything in its proper place, and we are done with
packaging this small example:

@example
% guild show-bundle example
Package: example
Version: 0
Depends: (srfi)
Category: libraries
 example/foo.scm
 example/bar.scm
Category: programs
 hello
Category: documentation
 README
@end example

For good measure, we should also add the @code{synopsis},
@code{description} and @code{homepage} properties to the package:

@lisp
(package (example (0))
  (depends (srfi))
  (synopsis "'Hello World' example")
  (description "This package contains a program that displays"
               "a familiar greeting.")
  (homepage "http://www.example.org/hello-world")
  (libraries
    (scm -> "example"))
  (programs
    (("programs" "hello") -> "hello")))
@end lisp

@node The Metadata File
@section The Metadata File

A metadata file must be named @file{pkg-list.scm} and must be either
in the top-level directory or an immediate sub-directory of a bundle
to be considered by Sigil.  It contains one or more @code{package}
forms, thus declaring which packages are inside the bundle.

The @code{package} form declares the name and version of the package,
and lists its properties, some of which are defined and used by Sigil,
but there also may be additional properties used by other software or
humans.

This leads to the following BNF-style grammar for the file's contents:

@verbatim
<pkg-list> -> <pkg-form>+
<pkg-form> -> (package (<name> <version>) <property>*)
<property> -> <synopsis> | <description> | <homepage> 
   | <depends> | <category> | <hook> | <user-defined>
<synopsis> -> (synopsis <string>)
<description> -> (description <string>*)
<homepage> -> (homepage <string>)
<depends> -> (depends <pkg-reference>*)
<category> -> (<category-name> <file-rule>*)
<category-name> -> libraries | programs | documentation | man
<hook> -> (installation-hook (<hook-option>*) <hook-body>)
<user-defined> -> (<property-name> <property-value>)
@end verbatim

As should be recognizable from the above grammar, properties are
identified by a keyword, and have specific contents depending on that
keyword.  Currently, the following keywords are defined and used by
Sigil:

@table @code
@item synopsis
A short single line describing the package briefly.

@item description
A longer, possibly multi-line description of the package.

@item homepage
This should carry an URL on which information about the software
contained in the package can be found.

@item depends
Declares the package's dependencies.

@item libraries
@itemx programs
@itemx documentation
@itemx man
These are used for categorizing files contained in the package, so they
can be installed into the approriate place in the filesystem, depending
on the destination.

@item installation-hook
A package may specify actions to be executed during installation using
this property.

@end table

@subsection Package Versions

Each package has a version that can be ordered, so that a ``newer''
relation can be established.  A version has two representations, one as a
text string (for use in file names and for human consumption in general)
and another one as S-expression, allowing easy embedding into and
manipulation in Scheme.

The S-expression representation is a sequence of lists of integers, for
example @samp{(1 2) (3)}, which is textually rendered as @samp{1.2-3} --
each list of integers is concatenated using a dot as separator, and
those groups are then concatenated with a dash separating them.

@subsection The package description

The properties @code{synopsis} and @code{description} are used convey
the purpose of the package to the user.

The value of the @code{synposis} property should be single string
shortly describing the package, such that it could be used in a sentence
starting with ``@var{package} is a(n) @dots{}''.

The @code{description} property contains a longer description of the
package, specified via a sequence of strings.  These sequence is handled
like like this:

@itemize @bullet
@item
If an item is starting with a space, it is treated as a verbatim line.
@item
If an item does @emph{not} start with a space, this item and all
subsequent ones that don't start with a space are treated as a paragraph
and are word-wrapped.
@item
Paragraphs are separated by empty strings.
@end itemize

@subsection Dependencies

A package can declare its dependencies on other packages via the
@code{depends} clause of the @code{package} form.  A dependency names the
package depended upon and, optionally, constrains the version of that
package.  In the following example, @samp{foo} depends on @samp{bar} and
@samp{baz}; the dependency on @samp{bar} is unconstrained, allowing for
any version of @samp{bar} to fulfill the dependency, while only a
version of @samp{baz} higher than 1.2-3 will satisfy the second
dependency.

@lisp
(package (foo (1 1))
  (depends (bar) 
           (foo (>= (1 2) (3)))))
@end lisp

This is the BNF grammar for the package references used in the
@code{depends} clause:

@verbatim
<pkg-reference> -> (<pkg-name>) | (<pkg-name> <version-constraint>)
<version-constraint> -> <version> | (<comparator> <version>)
   | (not <version-constraint>) 
   | (or <version-contraint>*)
   | (and <version-constraint>*)
<comparator> -> <= | >= | < | >
<version> -> <part>+
<part> -> (<integer>+)
@end verbatim

@subsection Categories

A package's files are grouped into categories to allow installation into
appropriate places in the filesystem.  Each category contains a (possibly
empty) subset of the files contained in or below the directory the
metadata file resides in.

A file can belong into at most one category.  It can be mapped to any
location (relative filename) inside that category, regardless of its
physical location relative to the metadata file.  To specify this
mapping, a set of rules may be specified for each category known to
Sigil, using the following grammar (see the
@uref{http://synthcode.com/scheme/irregex/, IrRegular expression
documentation} for more on SRE syntax):

@verbatim
<file-rule> -> <source> | <source> -> <destination>
   | (exclude <source>*)
<source> -> <string> | <path-with-tail>
<path-with-tail> -> (<string>* <tail>) | <tail>
<tail> -> * | sls | (: <sre>*)
@end verbatim

For instance, the following rules are used for the @code{libraries}
category in the packaging of the SRFI collection:

@lisp
(libraries ((: "%3a" (* any)) -> "srfi")
           ("private" -> ("srfi" "private")))
@end lisp

In plain English, this means ``put any files and directories starting
with ``%3a'' below the @file{srfi} directory, and put the file (or, in
this case, directory) @file{private} in @file{srfi/private}.

@subsection Hooks

Hooks are a mechanism to perform actions during package installation.  To
that end, the package maintainer writes Scheme code resembling an R6RS
program.  The code must satisfy certain properties, namely that the last
expression of the ``program'' must evaluate to a single-argument
procedure that is invoked when the package is installed.  The details of
that procedure will be discussed below, but first the grammar for the
hook options and body:

@verbatim
<hook-option> -> (needs-source? . <boolean>)
<hook-body> -> (import <library-reference>+) <definitions> <expressions>
@end verbatim

Hooks are not evaluated and executed by Sigil itself, since Sigil may
be installed in a different destination than that which the package in
question should be installed into.  Evaluating hooks in Sigil's own
context would hence pose the problem that the hook could rely neither
on libraries provided by its package nor its dependencies.  For this
reason, sigil spawns a small helper program.  With this way of
proceeding, an installation hook may @code{import} libraries that are
part of the package or its dependencies.

However, due to the way the communication of Sigil with helper
programs running the hook is implemented currently, a hook must not
use the standard output or input ports, as these are used for
communication (the standard error port can be used, however).  This
restriction will be hopefully lifted in a later version of Sigil.

@subsubsection Hook options

The only supported option supported currently is @code{needs-source?},
which specifies whether the hook requires the unpackaged source of the
package for its operation.  The @code{needs-source?} option defaults to
@code{#f}.

@subsubsection The hook agent

As mentioned before, the single-argument procedure that is the result of
the last expression of the hook body is executed by the package manager.
Its single argument is an ``hook agent'' procedure, which can be invoked
to trigger actions of the package manager on behalf of the hook.  The
first argument to this procedure is the name of the desired action,
further arguments depend on the action specified.  Currently, the
following actions are available:

@deffn Action install-file category dest-filename src-filename
Install file @var{src-filename}, which is a string referring to an
existing file.
@end deffn

@deffn Action package-name
Returns the name of the package being installed.
@end deffn

@deffn Action unpacked-source
Returns the path of the contents of the extracted package as a string,
or @code{#f}, if the @code{needs-source?} option was not specified or
@code{#f}.
@end deffn
