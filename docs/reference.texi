@node Reference
@chapter Reference

@command{doro} is a command-line interface for downloading, installing and
inspecting packages containing R6RS libraries and programs.

@command{doro} accepts, besides global options, a command and
command-specific options. Each command is geared to a particuliar
task, for example installing, removing or upgrading packages.

The following subsections document the available commands, grouped by
related tasks.

@menu
* Global Options:: These must go directly after @command{doro}
* Command Reference:: All of the commands
* Configuration File:: Configuration file syntax
@end menu

@node Global Options
@section Global Options

@table @option
@item --no-config

Do not read any configuration file. This option can be used to ensure
that @command{doro} will just use built-in defaults.

@item --config=@var{file}
@itemx -c

Use configuration file @var{file}, instead of the default
one. @xref{Configuration File} for configuration file syntax.

@item --prefix=@var{prefix}

Use an FHS destination located below the directory @var{prefix}. This
option has the same effect as adding an FHS destination to the
configuration file and using it for this invocation of @command{doro}.

@item --non-interactive
@itemx -n

Run non-interactively.  This assumes ``yes'' on most questions.
Confirmation prompts for actions that are ``risky'' (in the sense that
their effects may be potentially unexpected or unwanted) cause program
termination with a non-zero exit code, after displaying an error
message.

@item --yes
@itemx -y

Like @option{--non-interactive}, but silently assume ``yes'' on all
questions, even risky ones.

@end table

@node Command Reference
@section Command Reference

Note that all commands take a @option{--help} option showing brief
usage information, although that option is not explicitly listed
below.

@subsection Querying

The following commands gather information; either from the package
database, uninstalled bundles, or about the configuration.

@deffn Command list

Produces a list of packages, along with their installation status and
version on standard output.

@table @option
@item --all
@itemx -a

Show all packages, including uninstalled, but available ones. By
default only installed packages are listed.

@item --bundle=@var{bundle}
@itemx -b @var{bundle}

Temporarily adds @var{bundle}'s contents to the package database.

@end table
@end deffn

@deffn Command show package ...

Shows information about one or more packages.  This command lists
package, name, version and dependencies in RFC822-like style on standard
output.  Each @var{package} may be either:

@itemize
@item
A package name; in that case, all versions of @var{package} are shown.
It is not error when the package does not exist in the database or has
no versions, but that package will be simply ignored.

@item
A package name and version, separated by an equal sign, for example
@samp{foo=0.1.0}.  Only the specified version will be shown in this
case.  It is not an error if the package or specified version cannot be
found, but the package will simply be ignored.
@end itemize

@table @option
@item --bundle=@var{bundle}
@itemx -b @var{bundle}

Temporarily adds @var{bundle}'s contents to the package database.

@end table
@end deffn

@deffn Command show-bundle bundle ...

Shows the contents of one or more bundles on standard output. The
content listing consist of each package's information, as shown by the
the @command{show} command, plus the package's the list of files in
each category. @xref{Packages}.

@end deffn

@deffn Command config
Shows the current configuration in YAML-like style.
@end deffn

@subsection Package managment

@deffn Command update
Download information about available packages from all repositories of
the selected destination.
@end deffn

@deffn Command install package ...

Install the listed @var{package}s. Each @var{package} argument can be a
package name, in which case the newest available version is
installed. If the package in question is already installed, it will be
upgraded. One may also explicitly specify a specific version to be
installed using the syntax @samp{@var{package-name}=@var{version}}.

@table @option
@item --bundle=@var{bundle}
@itemx -b @var{bundle}

Temporarily adds @var{bundle}'s contents to the package database.

@item --no-depends

Disable dependency resolution. This option allows for installing
packages with unresolved dependencies.

@end table
@end deffn

@deffn Command remove package ...

Remove the listed @var{package}s from the system.

@table @option
@item --no-depends

Disable dependency resolution.  This option allows for removing packages
that still have others depending on them.

@end table
@end deffn

@deffn Command upgrade
Upgrade all packages to the newest available version.
@end deffn

@deffn Command init
This command can be used to explicitly initialize a destination for
use with a particuliar Scheme implementation. The initialization is
otherwise done implicitly upon first opening the database for that
destination, and uses the @code{default-implementation} configuration
clause (@pxref{default-implementation}).

@table @option
@item --implementation=@var{impl}
@itemx -i @var{impl}

Select the implementation to use for that destination.

@end table
@end deffn

@subsection Development

The following commands are of use if you want to create your own
packages and repositories.

@deffn Command create-bundle directory ...
Create a bundle from the directories given as arguments.

@table @option
@item --output=@var{filename}
@itemx -o @var{filename}

Output the bundle to @var{filename}. When this option is not given,
dorodango will try to name the bundle based on the package contained
in it. Should the bundle contain multiple packages, this option is
mandatory.

@item --directory=@var{directory}
@itemx -d @var{directory}

Output directory for the created bundle file. This option only has an
effect when @option{--output} is @emph{not} provided.

@item --append-version=@var{version}
Rewrite the versions of all packages in the created bundle by
appending @var{version}. This is useful, for e.g. creating
``snapshot'' bundles from a VCS, where one could append the current
date to the upstream version.
@end table
@end deffn

@deffn Command scan-bundles directory ...
Search the directories passed as arguments for bundles and produce an
``available file'' containing information about found bundles on
standard output.

@table @option
@item --output=@var{filename}
@itemx -o @var{filename}
@end table
@end deffn

@deffn Command symlink-bundle bundle-directory target-directory

Create a symbolic link tree in @var{target-directory}, using the
bundle at @var{bundle-directory}.

@table @option
@item --force
Allow the command to operate even when @var{target-directory} already
exists.

@item --deep
Create a symbolic link for every file. Without this option,
@command{doro} will create symbolic links to directories when this
doesn't change the created symlink tree.

@item --include=@var{packages}
Create symbolic links just for the packages listed in the comma- or
space-seperated list @var{packages}.

@item --exclude=@var{packages}
Create symbolic links for all @emph{but} the packages listed in the
comma- or space-seperated list @var{packages}.

@end table
@end deffn

@node Configuration File
@section Configuration File

The configuration file stores permanent settings for dorodango, and
can be selected with the @option{--config} option, @pxref{Global
Options}. It's syntax is S-expression-based clauses. In the following,
we will dissect an example configuration file; note however, that for
most users, a much simpler configuration will suffice
(@pxref{Quickstart}). Also the @option{--prefix} global option can be
used to work with multiple destinations without explicitly setting
them up in the configuration file. Anyway, without further ado, here's
a configuration that uses all possible clauses:

@lisp
(repository experimental "http://rotty.yi.org/doro/experimental")
(repository unstable "http://rotty.yi.org/doro/unstable")
(destination unstable
  (fhs "/home/alice/scheme")
  (repositories unstable))
(destination experimental
  (fhs "/home/alice/scheme-experiments")
  (database "/home/alice/scheme-experiments/db"))
(default-destination experimental)
(default-implementation ypsilon)
@end lisp

@subsection Repositories

A @code{repository} clause defines a repository, which may be located on
an HTTP server or a local file system. The repository is given a name,
and a location is specified as an URI:

@lisp
(repository @var{<name>} @var{<location-uri>})
@end lisp

In the running example, @var{<name>} is @code{experimental}, and
@var{<location-uri>} is the string
@code{"http://rotty.yi.org/doro/experimental"}, denoting an HTTP
repository at the apparent location.

@subsection Destinations
@cindex destinations, configuring
@cindex configuring destinations

Destinations are where a package's files are installed to; they have an
associated package database that keeps track of installed packages. In
principle, destinations come in ``flavors'', but at the time of writing,
there's only a single flavor: @code{fhs}, which puts the files in
subdirectories of the specified prefix directory that are (at least
roughly) in line with the @uref{http://www.pathname.com/fhs/, FHS},
which specifies the directory layout of UNIX-like systems.  This means
one can use an @code{fhs} destination to install to @file{/usr/local},
and have files ending up in familiar locations.

In the configuration file, destinations are given a name so they can
be referred to by @command{doro}'s @option{--destination}
option. @xref{Global Options}.

Unless specified otherwise via the @code{repositories} sub-clause, all
repositories listed up to the point of the destination's declaration
will be used with this destination. A repository must be declared before
being referenced in a destination's @code{repositories} clause.

The @code{database} sub-clause allows to define the location of the
package database on disk; if it is left out, dorodango will use a
default location, based on the destination's prefix.

@subsection Defaults

@anchor{default-implementation}

The @code{default-implementation} clause specifies the Scheme
implementation to use by default when setting up new destinations.  The
implementation associated with a destination will be used by R6RS
programs installed into that destinationq.  One can explicitly
initialize a destination using the @command{doro init} command, thus
overriding the default.

If @code{default-implementation} is not specified, dorodango will use
a built-in default (@code{ikarus} at the time of writing).

Using the @code{default-destination} clause one can specify which
configured destination will be used when none is explicitly specified
via the @option{--destination} global option. If there is no
@code{default-implementation} clause, the first destination specified is
considered the default.

@subsection Formal Grammar
@cindex configuration file, grammar

A complete BNF-style grammar for the configuration file:

@verbatim
<configuration> -> <clause>*
<clause> ->  <repository> | <destination>
   | <default-destination> | <default-implementation>

<repository> -> (repository <name> <uri>)

<destination> -> (destination <name> <destination-spec> <option>*)
<option> -> (database <directory>)
   | (repositories <name>*)
<destination-spec> -> (fhs <directory>)

<default-destination> -> (default-destination <name>)
<default-implementation> -> (default-implementation <implementation>)
<implementation> = ikarus | ypsilon

<directory> -> <string>
<name> -> <symbol>
<uri> -> <string>
@end verbatim
